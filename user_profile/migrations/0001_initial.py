# Generated by Django 3.2.6 on 2025-05-04 19:24

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.TextField(blank=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('mbti', models.CharField(blank=True, choices=[('INTJ', 'INTJ - Architect'), ('INTP', 'INTP - Logician'), ('ENTJ', 'ENTJ - Commander'), ('ENTP', 'ENTP - Debater'), ('INFJ', 'INFJ - Advocate'), ('INFP', 'INFP - Mediator'), ('ENFJ', 'ENFJ - Protagonist'), ('ENFP', 'ENFP - Campaigner'), ('ISTJ', 'ISTJ - Logistician'), ('ISFJ', 'ISFJ - Defender'), ('ESTJ', 'ESTJ - Executive'), ('ESFJ', 'ESFJ - Consul'), ('ISTP', 'ISTP - Virtuoso'), ('ISFP', 'ISFP - Adventurer'), ('ESTP', 'ESTP - Entrepreneur'), ('ESFP', 'ESFP - Entertainer')], max_length=4, null=True)),
                ('zodiac_sign', models.CharField(blank=True, choices=[('aries', '♈ Aries'), ('taurus', '♉ Taurus'), ('gemini', '♊ Gemini'), ('cancer', '♋ Cancer'), ('leo', '♌ Leo'), ('virgo', '♍ Virgo'), ('libra', '♎ Libra'), ('scorpio', '♏ Scorpio'), ('sagittarius', '♐ Sagittarius'), ('capricorn', '♑ Capricorn'), ('aquarius', '♒ Aquarius'), ('pisces', '♓ Pisces')], max_length=12, null=True)),
                ('dietary_preference', models.CharField(blank=True, choices=[('vegetarian', 'Vegetarian'), ('vegan', 'Vegan'), ('omnivore', 'Omnivore'), ('pescatarian', 'Pescatarian'), ('keto', 'Keto')], max_length=12, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InterestCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('hobby', 'Hobby'), ('music', 'Music Genre'), ('sport', 'Sport'), ('language', 'Language'), ('pet', 'Pet Preference')], max_length=20)),
            ],
            options={
                'ordering': ['category', 'name'],
                'unique_together': {('name', 'category')},
            },
        ),
        migrations.CreateModel(
            name='UserInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('interest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_profile.interestcategory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'interest')},
            },
        ),
        migrations.AddField(
            model_name='profile',
            name='interests',
            field=models.ManyToManyField(related_name='profiles', through='user_profile.UserInterest', to='user_profile.InterestCategory'),
        ),
        migrations.AddField(
            model_name='profile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
